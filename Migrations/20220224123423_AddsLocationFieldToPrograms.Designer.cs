// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using SportyApi.Models;

namespace SportyApi.Migrations
{
    [DbContext(typeof(AppDataContext))]
    [Migration("20220224123423_AddsLocationFieldToPrograms")]
    partial class AddsLocationFieldToPrograms
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .UseIdentityColumns()
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("ProductVersion", "5.0.0");

            modelBuilder.Entity("ApplicationUserSport", b =>
                {
                    b.Property<string>("InterestedUsersId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<Guid>("SportingInterestSportId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("InterestedUsersId", "SportingInterestSportId");

                    b.HasIndex("SportingInterestSportId");

                    b.ToTable("ApplicationUserSport");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .UseIdentityColumn();

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .UseIdentityColumn();

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("RoleId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens");
                });

            modelBuilder.Entity("SportyApi.Models.Core.Domain.ApplicationUser", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("FirstName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("LastName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers");
                });

            modelBuilder.Entity("SportyApi.Models.Core.Domain.CreditCard", b =>
                {
                    b.Property<Guid>("CreditCardId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("CreditCardNumber")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ExpirationDate")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Zipcode")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("CreditCardId");

                    b.HasIndex("UserId");

                    b.ToTable("CreditCards");
                });

            modelBuilder.Entity("SportyApi.Models.Core.Domain.Level", b =>
                {
                    b.Property<Guid>("LevelId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<Guid>("SportId")
                        .HasMaxLength(50)
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("LevelId");

                    b.HasIndex("SportId");

                    b.ToTable("Levels");

                    b.HasData(
                        new
                        {
                            LevelId = new Guid("963fe526-be1e-4359-afec-2c21066f6769"),
                            Description = "Beginner",
                            SportId = new Guid("560408b9-1dea-4fe6-9f68-1cc1d6c703b5")
                        },
                        new
                        {
                            LevelId = new Guid("fc962f47-7d08-49cd-a3a4-a59c8961426f"),
                            Description = "Intermediate",
                            SportId = new Guid("560408b9-1dea-4fe6-9f68-1cc1d6c703b5")
                        },
                        new
                        {
                            LevelId = new Guid("da42be7d-669f-4114-98df-850e597b429e"),
                            Description = "Advanced",
                            SportId = new Guid("560408b9-1dea-4fe6-9f68-1cc1d6c703b5")
                        },
                        new
                        {
                            LevelId = new Guid("baf0da54-5b0e-4f2a-8cf4-3403cb513482"),
                            Description = "Beginner",
                            SportId = new Guid("2eb7d589-7dc9-453f-9a8d-00f53ef9449b")
                        },
                        new
                        {
                            LevelId = new Guid("160c8de9-74e6-4eae-bc93-78e95f7b686e"),
                            Description = "Intermediate",
                            SportId = new Guid("2eb7d589-7dc9-453f-9a8d-00f53ef9449b")
                        },
                        new
                        {
                            LevelId = new Guid("42d04fb1-74cc-4f59-a725-2cd4b16059b2"),
                            Description = "Advanced",
                            SportId = new Guid("2eb7d589-7dc9-453f-9a8d-00f53ef9449b")
                        });
                });

            modelBuilder.Entity("SportyApi.Models.Core.Domain.Order", b =>
                {
                    b.Property<Guid>("OrderId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTimeOffset>("Date")
                        .HasColumnType("datetimeoffset");

                    b.Property<double>("TotalPrice")
                        .HasColumnType("float");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("OrderId");

                    b.HasIndex("UserId");

                    b.ToTable("Orders");
                });

            modelBuilder.Entity("SportyApi.Models.Core.Domain.OrderItem", b =>
                {
                    b.Property<Guid>("OrderId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("ProductId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("Amount")
                        .HasColumnType("int");

                    b.Property<double>("TotalItemPrice")
                        .HasColumnType("float");

                    b.HasKey("OrderId", "ProductId");

                    b.HasIndex("ProductId");

                    b.ToTable("OrderItems");
                });

            modelBuilder.Entity("SportyApi.Models.Core.Domain.Product", b =>
                {
                    b.Property<Guid>("ProductId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Brand")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("DescriptionMinimized")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ImageUrl")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<double>("Price")
                        .HasColumnType("float");

                    b.Property<int>("Quantity")
                        .HasColumnType("int");

                    b.Property<Guid>("SportId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("ProductId");

                    b.HasIndex("SportId");

                    b.ToTable("Products");

                    b.HasData(
                        new
                        {
                            ProductId = new Guid("abad15b2-83b4-4626-b454-6347678bb6f4"),
                            Brand = "Arena",
                            Description = "Arena swimming cap men's and women's long hair ear protection comfortable silicone waterproof swimming cap adult plus bubble swimming cap At last a water resistant swim cap which has been designed specifically for people with long hair!!  The evolution of the Arena has become this model that holds your hair in place and than a cap which also protects it.",
                            DescriptionMinimized = "unisex long hair ear protection comfortable silicone waterproof swimming cap",
                            ImageUrl = "Products/Swimming/Arena Swimming Cap.jpg",
                            Name = "Arena Swimming Cap",
                            Price = 490.0,
                            Quantity = 150,
                            SportId = new Guid("560408b9-1dea-4fe6-9f68-1cc1d6c703b5")
                        },
                        new
                        {
                            ProductId = new Guid("cedff870-09bb-4284-a270-85b160d09d63"),
                            Brand = "COPOZZ",
                            Description = "COPOZZ White swim cap for long hair - Swimming Cap for women ladies and adult, Comfortable waterproof silicone swimming hat. COPOZZ Swimming cap, premium silicone swim caps for ultimate stretch and durability, non - toxic no odd smell, no deformation, quick dry and wrinkle - free.Designed for indoor pool swimming, competition, training and also outdoor water sports.",
                            DescriptionMinimized = "COPOZZ Swimming Cap for women ladies and adult, Comfortable waterproof silicone swimming hat.",
                            ImageUrl = "Products/Swimming/COPOZZ long hair swim cap.jpg",
                            Name = "COPOZZ Long Hair Swim Cap",
                            Price = 650.0,
                            Quantity = 150,
                            SportId = new Guid("560408b9-1dea-4fe6-9f68-1cc1d6c703b5")
                        },
                        new
                        {
                            ProductId = new Guid("f5d157e4-9818-434a-bc07-3a81a30c5467"),
                            Brand = "COPOZZ",
                            Description = "Large swim cap, Designed for long hair, Silicone bathing cap swimming hat for women. COPOZZ Swimming cap, Designed for indoor pool swimming, competition, training and also outdoor water sports. Very thick mill silicone cap, fits XXL head (24 1/4) perfect and stays in place for my entire 2500 swim.",
                            DescriptionMinimized = "COPOZZ Large swim cap, Designed for long hair, Silicone bathing cap swimming hat for women.",
                            ImageUrl = "Products/Swimming/COPOZZ swim cap with Littel Hearts.jpg",
                            Name = "COPOZZ Swim Cap with Littel Hearts",
                            Price = 650.0,
                            Quantity = 150,
                            SportId = new Guid("560408b9-1dea-4fe6-9f68-1cc1d6c703b5")
                        },
                        new
                        {
                            ProductId = new Guid("4da2934e-d818-4274-8301-cc67643b89f8"),
                            Brand = "Queshark",
                            Description = "Queshark swimming goggles for adult  men and women with earplugs. New upgrade comfortable large frame design to used on the goggles ensure a snug fit on different facial forms and never allows water leak in. Nose pads with removable design, able to adapt to various high bridge nose, wear more comfortable. The latest technology which enhances the anti-fog ability and provides a clear vision when swimming. It easy to wear and take off the goggles.",
                            DescriptionMinimized = "Queshark swimming goggles for adult  men and women with earplugs.",
                            ImageUrl = "Products/Swimming/Queshark Glasses for Swimming.jpg",
                            Name = "Queshark Glasses for Swimming",
                            Price = 190.0,
                            Quantity = 150,
                            SportId = new Guid("560408b9-1dea-4fe6-9f68-1cc1d6c703b5")
                        },
                        new
                        {
                            ProductId = new Guid("ce817396-cb55-4933-bfd2-0c8fed600928"),
                            Brand = "Speedo",
                            Description = "A short and straight blade fin improves kick efficiency and develops kick strength without overtraining muscles, allowing swimmers to focus on proper kick mechanics.Swim fins are color coded, making this a great choice for swim teams and aquatic facilities, allowing quick sorting for the perfect fit.They're made with a super soft rubber for comfortable extended wear with secure fitting. These essential tools help strengthen and speed up your kick for overall better performance in the pool.",
                            DescriptionMinimized = "Original speedo, short blade swim training fins, Silver with black ankle.",
                            ImageUrl = "Products/Swimming/Queshark Glasses for Swimming.jpg",
                            Name = "Speedo Short Blade Training Fin",
                            Price = 450.0,
                            Quantity = 150,
                            SportId = new Guid("560408b9-1dea-4fe6-9f68-1cc1d6c703b5")
                        },
                        new
                        {
                            ProductId = new Guid("4f9bab7f-23fe-4e4a-9537-e42aa3099e39"),
                            Brand = "Garage Gear",
                            Description = "2 Hole palm grips made of 3 mm split cow leather that will ensure the best natural feel while protecting your skin from chaffing & direct contact of textured steel with your skin.",
                            DescriptionMinimized = "Garage Gear 2 Hole palm grips",
                            ImageUrl = "Products/Gym/Gymnastic Hand Gear.jpg",
                            Name = "Gym Hand Grips",
                            Price = 300.0,
                            Quantity = 150,
                            SportId = new Guid("2eb7d589-7dc9-453f-9a8d-00f53ef9449b")
                        },
                        new
                        {
                            ProductId = new Guid("e7436c4c-6b4c-471d-b4b1-55799c6923fe"),
                            Brand = "Garage Gear",
                            Description = "The Classic speed rope with an Aluminum soft knurled Handles, a 3-meter adjustable length steel wire coated with PVC cover chord, a handle bearing, and a chord ball bearing ensures the most swift and smooth spin for performing double and even triple under.  Rope Weight: 150 grams. Handel Length: 14.5 cm.",
                            DescriptionMinimized = "The Classic speed rope with an Aluminum soft knurled Handles",
                            ImageUrl = "Products/Swimming/Aluminum Speed Rope.jpg",
                            Name = "Aluminum Speed Rope",
                            Price = 350.0,
                            Quantity = 150,
                            SportId = new Guid("2eb7d589-7dc9-453f-9a8d-00f53ef9449b")
                        },
                        new
                        {
                            ProductId = new Guid("4cd1be20-3db5-4c07-b000-a580761fb947"),
                            Brand = "Reebok",
                            Description = "Equipped with a strong 2.5 HP motor at the heart of the treadmill, the Jet 300 delivers powerful and quiet performance with a top speed of 20 kph. Providing you with 15 levels of power incline to intensify your runs, the 300 delivers three user-defined, three heart rate control and three custom target workouts whilst 24 pre-set programmes kick-start your regime straight from set up.",
                            DescriptionMinimized = "Reebok Treadmill delivers powerful and quiet performance with a top speed of 20 kph",
                            ImageUrl = "Products/Swimming/Reebok Jet 300 Series Treadmill.jpg",
                            Name = "Jet 300 Series Treadmill",
                            Price = 21845.0,
                            Quantity = 150,
                            SportId = new Guid("2eb7d589-7dc9-453f-9a8d-00f53ef9449b")
                        },
                        new
                        {
                            ProductId = new Guid("57bf9990-574e-46dd-8e5d-409ae50cdffd"),
                            Brand = "Garage Gear",
                            Description = "The traditional collars trusted for decades and made from high quality steel that will clamp on your barbell without sliding or snapping. A rubber handle covers the handle part for mild and soft quick exchange of weights. A simple yet effective solution to lock weights on your barbell.",
                            DescriptionMinimized = "The traditional high quality collars steel that will clamp on your barbell without sliding or snapping.",
                            ImageUrl = "Products/Swimming/Spring Collars.jpg",
                            Name = "Spring Collars",
                            Price = 150.0,
                            Quantity = 150,
                            SportId = new Guid("2eb7d589-7dc9-453f-9a8d-00f53ef9449b")
                        },
                        new
                        {
                            ProductId = new Guid("502c63d7-f644-4b52-9fef-44b6567a57b7"),
                            Brand = "Papababe",
                            Description = "150 lb dumbbell set package include- 5,10,15,20,25 lbs pair with rack . Total 2 boxes. For anyone who wants to build strength, burn fat, and create a shapely body, free weight training with dumbbells is more effective than exercise machines.Even if you’re beyond the age of 40 , it’s never too late to start. Dumbbells are great workout equipment , if you prefer to exercise in the comfort of your home.",
                            DescriptionMinimized = "150 lb dumbbell set package include- 5,10,15,20,25 lbs pair with rack. Total 2 boxes.",
                            ImageUrl = "papababe Free Weights Dumbbells Set.jpg",
                            Name = "Papababe Free Weights Dumbbells Set",
                            Price = 7068.0,
                            Quantity = 150,
                            SportId = new Guid("2eb7d589-7dc9-453f-9a8d-00f53ef9449b")
                        });
                });

            modelBuilder.Entity("SportyApi.Models.Core.Domain.ReservedProgram", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<Guid>("TrainingProgramId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTimeOffset>("Date")
                        .HasColumnType("datetimeoffset");

                    b.HasKey("UserId", "TrainingProgramId");

                    b.HasIndex("TrainingProgramId");

                    b.ToTable("ReservedPrograms");
                });

            modelBuilder.Entity("SportyApi.Models.Core.Domain.ShoppingCart", b =>
                {
                    b.Property<Guid>("ShoppingCartId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("ShoppingCartId");

                    b.HasIndex("UserId");

                    b.ToTable("ShoppingCarts");
                });

            modelBuilder.Entity("SportyApi.Models.Core.Domain.ShoppingCartItem", b =>
                {
                    b.Property<Guid>("ShoppingCartItemId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("Amount")
                        .HasColumnType("int");

                    b.Property<Guid>("ProductId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("ShoppingCartId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<double>("TotalItemPrice")
                        .HasColumnType("float");

                    b.HasKey("ShoppingCartItemId");

                    b.HasIndex("ProductId");

                    b.HasIndex("ShoppingCartId");

                    b.ToTable("ShppingCartItems");
                });

            modelBuilder.Entity("SportyApi.Models.Core.Domain.Sport", b =>
                {
                    b.Property<Guid>("SportId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("SportId");

                    b.ToTable("Sports");

                    b.HasData(
                        new
                        {
                            SportId = new Guid("a1729c05-d4a1-4016-b413-8310dc99f947"),
                            Name = "Swimming"
                        },
                        new
                        {
                            SportId = new Guid("fa6170f7-e47b-4399-b657-97d3d9dd8986"),
                            Name = "Gym"
                        });
                });

            modelBuilder.Entity("SportyApi.Models.Core.Domain.TrainingProgram", b =>
                {
                    b.Property<Guid>("TrainingProgramId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("DescriptionMinimized")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ImageUrl")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("LevelId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Location")
                        .IsRequired()
                        .HasMaxLength(450)
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<string>("Provider")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<Guid>("SportId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("TrainingProgramId");

                    b.HasIndex("LevelId");

                    b.HasIndex("SportId");

                    b.ToTable("TrainingPrograms");
                });

            modelBuilder.Entity("ApplicationUserSport", b =>
                {
                    b.HasOne("SportyApi.Models.Core.Domain.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("InterestedUsersId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("SportyApi.Models.Core.Domain.Sport", null)
                        .WithMany()
                        .HasForeignKey("SportingInterestSportId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("SportyApi.Models.Core.Domain.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("SportyApi.Models.Core.Domain.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("SportyApi.Models.Core.Domain.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("SportyApi.Models.Core.Domain.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("SportyApi.Models.Core.Domain.ApplicationUser", b =>
                {
                    b.OwnsOne("SportyApi.Models.Core.Domain.Address", "Address", b1 =>
                        {
                            b1.Property<string>("ApplicationUserId")
                                .HasColumnType("nvarchar(450)");

                            b1.Property<int>("BuildingNumber")
                                .HasColumnType("int");

                            b1.Property<string>("City")
                                .HasMaxLength(50)
                                .HasColumnType("nvarchar(50)");

                            b1.Property<string>("Street")
                                .HasMaxLength(200)
                                .HasColumnType("nvarchar(200)");

                            b1.HasKey("ApplicationUserId");

                            b1.ToTable("AspNetUsers");

                            b1.WithOwner()
                                .HasForeignKey("ApplicationUserId");
                        });

                    b.OwnsOne("SportyApi.Models.Core.Domain.RefreshToken", "RefreshToken", b1 =>
                        {
                            b1.Property<string>("ApplicationUserId")
                                .HasColumnType("nvarchar(450)");

                            b1.Property<DateTime>("CreatedOn")
                                .HasColumnType("datetime2");

                            b1.Property<DateTime>("ExpiresOn")
                                .HasColumnType("datetime2");

                            b1.Property<string>("Token")
                                .HasColumnType("nvarchar(max)");

                            b1.HasKey("ApplicationUserId");

                            b1.ToTable("AspNetUsers");

                            b1.WithOwner()
                                .HasForeignKey("ApplicationUserId");
                        });

                    b.Navigation("Address");

                    b.Navigation("RefreshToken");
                });

            modelBuilder.Entity("SportyApi.Models.Core.Domain.CreditCard", b =>
                {
                    b.HasOne("SportyApi.Models.Core.Domain.ApplicationUser", "User")
                        .WithMany("CreditCards")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("SportyApi.Models.Core.Domain.Level", b =>
                {
                    b.HasOne("SportyApi.Models.Core.Domain.Sport", "Sport")
                        .WithMany("Levels")
                        .HasForeignKey("SportId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Sport");
                });

            modelBuilder.Entity("SportyApi.Models.Core.Domain.Order", b =>
                {
                    b.HasOne("SportyApi.Models.Core.Domain.ApplicationUser", "User")
                        .WithMany("Orders")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("SportyApi.Models.Core.Domain.OrderItem", b =>
                {
                    b.HasOne("SportyApi.Models.Core.Domain.Order", "Order")
                        .WithMany("OrderItems")
                        .HasForeignKey("OrderId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("SportyApi.Models.Core.Domain.Product", "Product")
                        .WithMany()
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Order");

                    b.Navigation("Product");
                });

            modelBuilder.Entity("SportyApi.Models.Core.Domain.Product", b =>
                {
                    b.HasOne("SportyApi.Models.Core.Domain.Sport", "Sport")
                        .WithMany("Products")
                        .HasForeignKey("SportId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Sport");
                });

            modelBuilder.Entity("SportyApi.Models.Core.Domain.ReservedProgram", b =>
                {
                    b.HasOne("SportyApi.Models.Core.Domain.TrainingProgram", "TrainingProgram")
                        .WithMany()
                        .HasForeignKey("TrainingProgramId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("SportyApi.Models.Core.Domain.ApplicationUser", "User")
                        .WithMany("ReservedPrograms")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("TrainingProgram");

                    b.Navigation("User");
                });

            modelBuilder.Entity("SportyApi.Models.Core.Domain.ShoppingCart", b =>
                {
                    b.HasOne("SportyApi.Models.Core.Domain.ApplicationUser", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("SportyApi.Models.Core.Domain.ShoppingCartItem", b =>
                {
                    b.HasOne("SportyApi.Models.Core.Domain.Product", "Product")
                        .WithMany()
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("SportyApi.Models.Core.Domain.ShoppingCart", "ShoppingCart")
                        .WithMany("ShoppingCartItems")
                        .HasForeignKey("ShoppingCartId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Product");

                    b.Navigation("ShoppingCart");
                });

            modelBuilder.Entity("SportyApi.Models.Core.Domain.TrainingProgram", b =>
                {
                    b.HasOne("SportyApi.Models.Core.Domain.Level", "Level")
                        .WithMany("TrainingPrograms")
                        .HasForeignKey("LevelId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("SportyApi.Models.Core.Domain.Sport", "Sport")
                        .WithMany("TrainingPrograms")
                        .HasForeignKey("SportId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Level");

                    b.Navigation("Sport");
                });

            modelBuilder.Entity("SportyApi.Models.Core.Domain.ApplicationUser", b =>
                {
                    b.Navigation("CreditCards");

                    b.Navigation("Orders");

                    b.Navigation("ReservedPrograms");
                });

            modelBuilder.Entity("SportyApi.Models.Core.Domain.Level", b =>
                {
                    b.Navigation("TrainingPrograms");
                });

            modelBuilder.Entity("SportyApi.Models.Core.Domain.Order", b =>
                {
                    b.Navigation("OrderItems");
                });

            modelBuilder.Entity("SportyApi.Models.Core.Domain.ShoppingCart", b =>
                {
                    b.Navigation("ShoppingCartItems");
                });

            modelBuilder.Entity("SportyApi.Models.Core.Domain.Sport", b =>
                {
                    b.Navigation("Levels");

                    b.Navigation("Products");

                    b.Navigation("TrainingPrograms");
                });
#pragma warning restore 612, 618
        }
    }
}
